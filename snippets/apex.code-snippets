{
  // File Header and Class Templates
  "Apex File Header": {
    "prefix": "apex-header",
    "scope": "apex",
    "body": [
      "/*******************************************************************************
       * ${1:Project Name}: ${2:Module/Component Description}",
      " *",
      " * Created by ${3:Author Name} on ${4:Date}.",
      " * Copyright (c) ${5:Year} ${6:Your Company}. All rights reserved.",
      " *******************************************************************************/"
    ],
    "description": "Standard file header comment block with project info, author, date, etc."
  },
  "Apex Class Skeleton": {
    "prefix": "apex-class-skeleton",
    "scope": "apex",
    "body": [
      "public with sharing class ${1:ClassName} {",
      "    // ${2:Class description or purpose}",
      "",
      "    public ${1:ClassName}() {",
      "        // Constructor - initialize fields if needed",
      "        ${3:// ...}",
      "    }",
      "",
      "    // Example method",
      "    public ${4:void} ${5:doSomething}(${6:Type} ${7:param}) {",
      "        ${8:// TODO: implement logic}",
      "    }",
      "}"
    ],
    "description": "Boilerplate for a public Apex class with sharing (constructor and example method)."
  },
  "Apex Wrapper Class": {
    "prefix": "apex-class-wrapper",
    "scope": "apex",
    "body": [
      "public class ${1:WrapperClass} {",
      "    // Define wrapper fields",
      "    public ${2:String} ${3:firstField};",
      "    public ${4:Integer} ${5:secondField};",
      "",
      "    public ${1:WrapperClass}(${2:String} firstField, ${4:Integer} secondField) {",
      "        this.${3:firstField} = firstField;",
      "        this.${5:secondField} = secondField;",
      "    }",
      "}"
    ],
    "description": "Simple wrapper class with two fields and a constructor (to return complex data to LWC)."
  },
  "Apex Queueable Class": {
    "prefix": "apex-class-queueable",
    "scope": "apex",
    "body": [
      "public class ${1:MyQueueable} implements Queueable {",
      "    public void execute(QueueableContext context) {",
      "        // TODO: background job logic",
      "        ${2:System.debug('Queueable executed');}",
      "    }",
      "}"
    ],
    "description": "Queueable Apex class pattern (implementing Queueable for async jobs)."
  },
  "Apex Batch Class": {
    "prefix": "apex-class-batch",
    "scope": "apex",
    "body": [
      "public class ${1:MyBatchJob} implements Database.Batchable<SObject>, Database.Stateful {",
      "    public Database.QueryLocator start(Database.BatchableContext bc) {",
      "        // Query records for batch processing",
      "        return Database.getQueryLocator('${2:SELECT Id, Name FROM Account}');",
      "    }",
      "    public void execute(Database.BatchableContext bc, List<SObject> scope) {",
      "        // Process each batch of records",
      "        for(SObject record : scope) {",
      "            ${3:// ... implement logic for each record}",
      "        }",
      "    }",
      "    public void finish(Database.BatchableContext bc) {",
      "        // Post-batch actions (if any)",
      "        ${4:System.debug('Batch job finished');}",
      "    }",
      "}"
    ],
    "description": "Batch Apex class skeleton (implements Batchable, with start, execute, finish methods)."
  },
  "Apex Schedulable Class": {
    "prefix": "apex-class-schedulable",
    "scope": "apex",
    "body": [
      "public class ${1:MySchedulable} implements Schedulable {",
      "    public void execute(SchedulableContext sc) {",
      "        // Scheduled job logic",
      "        ${2:System.debug('Scheduled job executed');}",
      "        ${3:// e.g., call a Batch or Queueable here}",
      "    }",
      "}"
    ],
    "description": "Schedulable Apex class skeleton (implements Schedulable with execute method)."
  },

  // Wireable Apex Methods (use @AuraEnabled(cacheable=true) for LWC @wire) :contentReference[oaicite:11]{index=11}:contentReference[oaicite:12]{index=12}
  "Get Accounts (Wire)": {
    "prefix": "apex-wire-getAccounts",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<Account> getAccounts() {",
      "    // Query Accounts (adjust fields/conditions as needed)",
      "    return [SELECT Id, Name FROM Account LIMIT 100];",
      "}"
    ],
    "description": "Wireable Apex method to fetch a list of Account records (cacheable=true for use with @wire)."
  },
  "Get Contacts (Wire)": {
    "prefix": "apex-wire-getContacts",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<Contact> getContacts() {",
      "    // Query Contacts with sample fields",
      "    return [SELECT Id, Name, Email FROM Contact LIMIT 100];",
      "}"
    ],
    "description": "Wireable Apex method to fetch Contacts (for use with @wire in LWC)."
  },
  "Search Accounts (Wire with param)": {
    "prefix": "apex-wire-searchAccounts",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<Account> findAccounts(String searchKey) {",
      "    // Search accounts by name (using wildcard)",
      "    String key = '%' + searchKey + '%';",
      "    return [SELECT Id, Name FROM Account WHERE Name LIKE :key LIMIT 50];",
      "}"
    ],
    "description": "Wireable Apex with a parameter. Example: search Accounts by name containing a given string."
  },
  "Get Record by Id (Wire)": {
    "prefix": "apex-wire-getRecordById",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static Account getAccountById(Id recordId) {",
      "    // Query a single Account by Id",
      "    return [SELECT Id, Name, Industry FROM Account WHERE Id = :recordId];",
      "}"
    ],
    "description": "Wireable Apex method to get a single record by Id (example uses Account)."
  },
  "Get Related Contacts (Wire)": {
    "prefix": "apex-wire-getRelatedContacts",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<Contact> getContactsByAccount(Id accountId) {",
      "    // Query Contacts related to a given Account",
      "    return [SELECT Id, Name, Email FROM Contact WHERE AccountId = :accountId];",
      "}"
    ],
    "description": "Wireable Apex to get child records related to a parent (example: Contacts of an Account)."
  },
  "Get Picklist Values (Wire)": {
    "prefix": "apex-wire-getPicklistValues",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<String> getStagePicklistValues() {",
      "    // Example: retrieve picklist values for Opportunity.StageName",
      "    List<String> values = new List<String>();",
      "    Schema.DescribeFieldResult fieldDesc = Opportunity.StageName.getDescribe();",
      "    for (Schema.PicklistEntry entry : fieldDesc.getPicklistValues()) {",
      "        values.add(entry.getLabel());",
      "    }",
      "    return values;",
      "}"
    ],
    "description": "Wireable Apex to retrieve picklist values (uses Schema describe; example for Opportunity StageName)."
  },
  "Get Current User (Wire)": {
    "prefix": "apex-wire-getCurrentUser",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static User getCurrentUser() {",
      "    // Return current user record (fields can be adjusted)",
      "    Id userId = UserInfo.getUserId();",
      "    return [SELECT Id, Name, Email FROM User WHERE Id = :userId];",
      "}"
    ],
    "description": "Wireable Apex to fetch the current User's record (commonly used to get user info in LWC)."
  },
  "Count Records (Wire)": {
    "prefix": "apex-wire-getRecordCount",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static Integer countContacts() {",
      "    // Example: count number of Contact records",
      "    return [SELECT count() FROM Contact];",
      "}"
    ],
    "description": "Wireable Apex returning an integer (example: count of Contact records)."
  },

  // Imperative Apex Methods (invoked via Lightning UI or user events):contentReference[oaicite:13]{index=13}
  "Update Account (Imperative)": {
    "prefix": "apex-imperative-updateAccount",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static Boolean updateAccount(Account acc) {",
      "    try {",
      "        update acc;",
      "        return true; // indicate success",
      "    } catch (Exception e) {",
      "        // Handle exception: throw with message for LWC to catch",
      "        throw new AuraHandledException(e.getMessage());",
      "    }",
      "}"
    ],
    "description": "Imperative Apex to update an Account record (returns success flag, handles exceptions)."
  },
  "Create Contact (Imperative)": {
    "prefix": "apex-imperative-createContact",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static Contact createContact(Contact newContact) {",
      "    insert newContact;",
      "    // Return the inserted record with some fields",
      "    return [SELECT Id, Name, Email FROM Contact WHERE Id = :newContact.Id];",
      "}"
    ],
    "description": "Imperative Apex to insert a Contact (takes a Contact object, inserts it, returns with Id and fields)."
  },
  "Delete Records (Imperative)": {
    "prefix": "apex-imperative-deleteRecords",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void deleteRecords(List<Id> recordIds) {",
      "    // Bulk delete example (for Contact records)",
      "    List<Contact> toDelete = [SELECT Id FROM Contact WHERE Id IN :recordIds];",
      "    delete toDelete;",
      "}"
    ],
    "description": "Imperative Apex to delete records by Id (example queries and deletes given Contact IDs)."
  },
  "Upsert Accounts (Imperative)": {
    "prefix": "apex-imperative-upsertRecords",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void upsertAccounts(List<Account> accounts) {",
      "    // Insert or update account records in bulk",
      "    upsert accounts;",
      "}"
    ],
    "description": "Imperative Apex to upsert a list of Account records."
  },
  "Share Record (Imperative)": {
    "prefix": "apex-imperative-shareRecord",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void shareAccount(Id accountId, Id userOrGroupId, String accessLevel) {",
      "    // Manually create a share record for Account",
      "    AccountShare share = new AccountShare();",
      "    share.AccountId = accountId;",
      "    share.UserOrGroupId = userOrGroupId;",
      "    share.AccountAccessLevel = accessLevel; // e.g., 'Edit' or 'Read'",
      "    insert share;",
      "}"
    ],
    "description": "Imperative Apex to create a sharing record for an Account (shares with a user or group at specified access level)."
  },
  "Callout GET (Imperative)": {
    "prefix": "apex-imperative-calloutGet",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static String callExternalGet() {",
      "    Http http = new Http();",
      "    HttpRequest req = new HttpRequest();",
      "    // Using Named Credential for endpoint",
      "    req.setEndpoint('callout:${1:My_Named_Cred}/api/resource');",
      "    req.setMethod('GET');",
      "    // (Optional) set headers: req.setHeader('Authorization','Bearer token');",
      "    HttpResponse res = http.send(req);",
      "    if (res.getStatusCode() == 200) {",
      "        return res.getBody();",
      "    } else {",
      "        throw new AuraHandledException('Callout failed: ' + res.getStatus());",
      "    }",
      "}"
    ],
    "description": "Imperative Apex for an HTTP GET callout (uses a Named Credential in endpoint for secure external API calls)."
  },
  "Callout POST (Imperative)": {
    "prefix": "apex-imperative-calloutPost",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static String callExternalPost(String jsonPayload) {",
      "    Http http = new Http();",
      "    HttpRequest req = new HttpRequest();",
      "    req.setEndpoint('https://api.example.com/submit');",
      "    req.setMethod('POST');",
      "    req.setHeader('Content-Type', 'application/json');",
      "    req.setBody(jsonPayload);",
      "    HttpResponse res = http.send(req);",
      "    return res.getBody();",
      "}"
    ],
    "description": "Imperative Apex for an HTTP POST callout (sends a JSON payload to an external API)."
  },
  "Publish Platform Event": {
    "prefix": "apex-imperative-publishEvent",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void publishUpdateEvent(String recordId) {",
      "    // Publish a platform event (assumes a Platform Event object with these fields)",
      "    ${1:Record_Update__e} event = new ${1:Record_Update__e}(",
      "        ${2:Record_Id__c} = recordId,",
      "        ${3:Status__c} = 'Updated'",
      "    );",
      "    Database.SaveResult sr = EventBus.publish(event);",
      "    if (!sr.isSuccess()) {",
      "        throw new AuraHandledException('Event publish failed: ' + sr.getErrors()[0].getMessage());",
      "    }",
      "}"
    ],
    "description": "Imperative Apex to publish a Platform Event (example with a custom event Record_Update__e)."
  },
  "Enqueue Queueable (Imperative)": {
    "prefix": "apex-imperative-queueJob",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void startJob() {",
      "    // Enqueue a Queueable job",
      "    System.enqueueJob(new ${1:MyQueueable}());",
      "}"
    ],
    "description": "Imperative Apex to enqueue a Queueable job (calls System.enqueueJob with a new instance)."
  },
  "Execute Batch (Imperative)": {
    "prefix": "apex-imperative-runBatch",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static Id runBatchJob() {",
      "    ${1:MyBatchJob} batchJob = new ${1:MyBatchJob}();",
      "    // Execute batch with specified scope size (e.g., 200 records per batch)",
      "    return Database.executeBatch(batchJob, ${2:200});",
      "}"
    ],
    "description": "Imperative Apex to run a Batch job (returns the AsyncApexJob Id of the scheduled batch)."
  },
  "Schedule Job (Imperative)": {
    "prefix": "apex-imperative-scheduleJob",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static String scheduleJob() {",
      "    ${1:MySchedulable} job = new ${1:MySchedulable}();",
      "    // Schedule the job to run at a specific time (Cron expression)",
      "    String cron = '0 0 8 1 1 ? *'; // e.g., January 1st at 8:00 AM GMT",
      "    return System.schedule('${2:MyJobName}', cron, job);",
      "}"
    ],
    "description": "Imperative Apex to schedule a Schedulable job using a cron expression (returns the scheduled job ID)."
  },
  "Send Email (Imperative)": {
    "prefix": "apex-imperative-sendEmail",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void sendEmailToContact(Id contactId) {",
      "    Contact c = [SELECT Id, Email, Name FROM Contact WHERE Id = :contactId];",
      "    if (String.isNotBlank(c.Email)) {",
      "        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();",
      "        mail.setToAddresses(new List<String>{ c.Email });",
      "        mail.setSubject('Hello ' + c.Name);",
      "        mail.setPlainTextBody('This is a test email.');",
      "        Messaging.sendEmail(new Messaging.SingleEmailMessage[] { mail });",
      "    }",
      "}"
    ],
    "description": "Imperative Apex to send an email to a contact (demonstrates using Messaging.SingleEmailMessage)."
  },
  "Perform Action (Imperative)": {
    "prefix": "apex-imperative-performAction",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void performAction(Id recordId) {",
      "    // Example action: toggle a checkbox field on an Account",
      "    Account acc = [SELECT Id, Active__c FROM Account WHERE Id = :recordId];",
      "    acc.Active__c = !acc.Active__c;",
      "    update acc;",
      "}",
      ""
    ],
    "description": "Imperative Apex for a generic action on a record (example toggles a boolean field on an Account)."
  },
  "Throw Custom Error (Imperative)": {
    "prefix": "apex-imperative-throwError",
    "scope": "apex",
    "body": [
      "@AuraEnabled",
      "public static void throwCustomError() {",
      "    // Throw a custom exception to be caught in LWC",
      "    throw new AuraHandledException('Custom error occurred.');",
      "}"
    ],
    "description": "Imperative Apex that always throws a custom error (useful for testing error handling in LWC)."
  },

  // Utility Apex Methods & Classes
  "Logger Utility": {
    "prefix": "apex-util-logger",
    "scope": "apex",
    "body": [
      "public with sharing class Logger {",
      "    public static void log(String message) {",
      "        System.debug(LoggingLevel.INFO, '[LOG] ' + message);",
      "    }",
      "}"
    ],
    "description": "Utility Apex class for logging messages to debug (static log method)."
  },
  "Parse JSON (Apex)": {
    "prefix": "apex-util-parseJson",
    "scope": "apex",
    "body": [
      "public static Map<String, Object> parseJson(String jsonString) {",
      "    // Deserialize JSON string into a loosely-typed map",
      "    return (Map<String, Object>) JSON.deserializeUntyped(jsonString);",
      "}"
    ],
    "description": "Utility Apex method to parse a JSON string into a Map<String, Object> (using JSON.deserializeUntyped)."
  },
  "Serialize to JSON (Apex)": {
    "prefix": "apex-util-toJson",
    "scope": "apex",
    "body": [
      "public static String toJson(Object obj) {",
      "    // Serialize an Apex object (or collection) to a JSON string",
      "    return JSON.serialize(obj);",
      "}"
    ],
    "description": "Utility Apex method to serialize an object to JSON (wrapper for JSON.serialize)."
  },
  "Format Date (Apex)": {
    "prefix": "apex-util-formatDate",
    "scope": "apex",
    "body": [
      "public static String formatDate(DateTime dt) {",
      "    if (dt == null) return null;",
      "    // Example format: 2023-12-31T23:59:59Z",
      "    return dt.format('yyyy-MM-dd\\'T\\'HH:mm:ss\\'Z\\'');",
      "}"
    ],
    "description": "Utility Apex to format a DateTime to a specific string pattern (example ISO 8601 format)."
  },
  "Check CRUD Permissions": {
    "prefix": "apex-util-checkCrud",
    "scope": "apex",
    "body": [
      "public static Boolean canCreateAccount() {",
      "    // Check object-level create permission on Account object",
      "    return Schema.sObjectType.Account.isCreateable();",
      "}"
    ],
    "description": "Utility Apex to check user permissions (example: whether current user can create Account records)."
  },
  "Try-Catch Wrapper": {
    "prefix": "apex-util-tryCatch",
    "scope": "apex",
    "body": [
      "public static void executeSafely() {",
      "    try {",
      "        ${1:// Protected code block}",
      "    } catch(Exception e) {",
      "        // Log and handle exception",
      "        System.debug('Error: ' + e);",
      "        // Optionally throw a handled exception",
      "        // throw new AuraHandledException('Failed: ' + e.getMessage());",
      "    }",
      "}"
    ],
    "description": "Utility Apex method with try-catch block for safe execution (logs exceptions and optionally throws a controlled error)."
  },
  "Custom Exception Class": {
    "prefix": "apex-util-customException",
    "scope": "apex",
    "body": [
      "public class ${1:CustomException} extends Exception {",
      "    // Custom exception for specific error handling",
      "}"
    ],
    "description": "Defines a custom Apex exception (extend Exception). Useful for throwing specific errors to LWC."
  },
  "Global Search (SOSL)": {
    "prefix": "apex-util-soslSearch",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<List<SObject>> globalSearch(String keyword) {",
      "    String searchExpr = '%' + keyword + '%';",
      "    // Search across multiple objects (SOSL). Adjust returning objects as needed.",
      "    return [FIND :searchExpr IN ALL FIELDS RETURNING Account(Id, Name), Contact(Id, Name)];",
      "}"
    ],
    "description": "Utility Apex using SOSL to perform a global search across multiple objects (returns a list of SObject lists)."
  },
  "Get Custom Metadata": {
    "prefix": "apex-util-getCustomMetadata",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static List<Custom_Metadata_Type__mdt> getAllMetadata() {",
      "    // Query all records of a custom metadata type (replace with actual API name and fields)",
      "    return [SELECT DeveloperName, ${1:Field__c} FROM Custom_Metadata_Type__mdt];",
      "}"
    ],
    "description": "Wireable Apex to retrieve all records of a Custom Metadata type (example query, adjust type and fields)."
  },
  "Describe SObject": {
    "prefix": "apex-util-describeSObject",
    "scope": "apex",
    "body": [
      "@AuraEnabled(cacheable=true)",
      "public static Map<String, Schema.SObjectField> describeObject(String objectApiName) {",
      "    Schema.SObjectType objType = Schema.getGlobalDescribe().get(objectApiName);",
      "    if (objType != null) {",
      "        // Return map of field API names to field definitions",
      "        return objType.getDescribe().fields.getMap();",
      "    }",
      "    return null;",
      "}"
    ],
    "description": "Utility Apex to describe an object’s fields. Returns a map of field API name to Schema.SObjectField for the given object."
  },

  // Apex Unit Test Snippets (for Apex test classes & methods) :contentReference[oaicite:14]{index=14}
  "Apex Test Class Template": {
    "prefix": "apex-test-class",
    "scope": "apex",
    "body": [
      "@isTest",
      "private class ${1:MyClass_Test} {",
      "    @TestSetup",
      "    static void setupTestData() {",
      "        // Create common test records and data for all tests",
      "        // e.g., insert new Account(Name='Test Account');",
      "    }",
      "",
      "    @isTest",
      "    static void ${2:exampleTest}() {",
      "        // Given: set up test scenario",
      "        Test.startTest();",
      "        // When: invoke method under test",
      "        ${3:MyClass}.${4:methodToTest}(${5:params});",
      "        Test.stopTest();",
      "        // Then: verify expected outcomes",
      "        System.assertEquals(${6:expected}, ${7:actual}, 'Verification message');",
      "    }",
      "}"
    ],
    "description": "Boilerplate for an Apex test class (with @TestSetup method and a sample test method)."
  },
  "Apex Test Method": {
    "prefix": "apex-test-method",
    "scope": "apex",
    "body": [
      "@isTest",
      "static void ${1:TestMethodName}() {",
      "    // Given: (optional) specific setup for this test",
      "    Test.startTest();",
      "    // When: call method under test",
      "    ${2:ClassUnderTest}.${3:methodToTest}(${4:params});",
      "    Test.stopTest();",
      "    // Then: verify results",
      "    System.assert(${5:condition}, '${6:Optional failure message}');",
      "}"
    ],
    "description": "Snippet for a single test method inside a test class (with Test.startTest/stopTest and assertions)."
  },
  "Test Setup Method": {
    "prefix": "apex-test-setup",
    "scope": "apex",
    "body": [
      "@TestSetup",
      "static void setupTestData() {",
      "    // Create test data common to all test methods",
      "    // e.g., insert new Account(Name='Test Account');",
      "}"
    ],
    "description": "Defines a @TestSetup method to create reusable test data for test methods in the class."
  },
  "Test start/stop block": {
    "prefix": "apex-test-startStop",
    "scope": "apex",
    "body": [
      "Test.startTest();",
      "${1:// ... code to test ...}",
      "Test.stopTest();"
    ],
    "description": "Snippet for wrapping code in Test.startTest() and Test.stopTest() calls (to separate test context)."
  },
  "Test runAs User": {
    "prefix": "apex-test-runAs",
    "scope": "apex",
    "body": [
      "User ${1:testUser} = new User(${2:/* set required User fields */});",
      "insert ${1:testUser};",
      "System.runAs(${1:testUser}) {",
      "    ${3:// code to execute as testUser}",
      "}"
    ],
    "description": "Snippet demonstrating System.runAs to execute test code under a different user context (after creating a test user)."
  },
  "HttpCalloutMock Class": {
    "prefix": "apex-test-calloutMock",
    "scope": "apex",
    "body": [
      "private class ${1:MockHttpResponse} implements HttpCalloutMock {",
      "    public HTTPResponse respond(HTTPRequest req) {",
      "        // Create a fake HTTP response",
      "        HttpResponse res = new HttpResponse();",
      "        res.setStatusCode(${2:200});",
      "        res.setHeader('Content-Type', 'application/json');",
      "        res.setBody('${3:{\"success\": true}}');",
      "        return res;",
      "    }",
      "}"
    ],
    "description": "A basic HttpCalloutMock implementation (inner class) for use in test methods to simulate callout responses."
  },
  "Test Data Factory Method": {
    "prefix": "apex-test-dataFactory",
    "scope": "apex",
    "body": [
      "private static ${1:Account} create${2:TestAccount}() {",
      "    Account acc = new Account(Name='${3:Test Account}');",
      "    // TODO: set required fields, e.g., acc.Type = 'Customer';",
      "    insert acc;",
      "    return acc;",
      "}"
    ],
    "description": "Utility method for test classes to create and insert a test record (example for Account)."
  },
  "System.assertEquals": {
    "prefix": "apex-test-assert",
    "scope": "apex",
    "body": [
      "System.assertEquals(${1:expected}, ${2:actual}, '${3:Failure message (optional)}');"
    ],
    "description": "Quick snippet for System.assertEquals(expected, actual, message)."
  },
  "Test Exception Handling": {
    "prefix": "apex-test-exception",
    "scope": "apex",
    "body": [
      "Boolean exceptionThrown = false;",
      "try {",
      "    ${1:SomeClass.someMethod}(${2:params});",
      "} catch (${3:Exception} e) {",
      "    exceptionThrown = true;",
      "    System.assertEquals('${4:Expected error message}', e.getMessage());",
      "}",
      "System.assert(exceptionThrown, 'Expected exception was not thrown');"
    ],
    "description": "Snippet for testing that a method throws an exception and verifying the exception message."
  },
  "Test Batch/Async Apex": {
    "prefix": "apex-test-batch",
    "scope": "apex",
    "body": [
      "Test.startTest();",
      "Id batchJobId = Database.executeBatch(new ${1:MyBatchJob}(), ${2:200});",
      "// If testing a Queueable: Id jobId = System.enqueueJob(new MyQueueable());",
      "Test.stopTest();",
      "// Optional: assert post-execution outcomes, e.g., check final state or results",
      "${3:// System.assert(...)}"
    ],
    "description": "Snippet for testing asynchronous Apex (Batch or Queueable). Starts the batch/queueable and uses Test.stopTest() to execute it."
  }
}

